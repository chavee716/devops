pipeline {
    agent any
    
    environment {
        // AWS and DockerHub Credentials
        AWS_CREDENTIALS = credentials('aws-credentials')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        EC2_SSH_CREDENTIALS = credentials('ec2-ssh-key')
        
        // Docker image details
        DOCKERHUB_USERNAME = "${DOCKERHUB_CREDENTIALS_USR}"
        EC2_HOST = credentials('ec2-host')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                script {
                    // SSH into EC2 and deploy
                    sshagent(['ec2-ssh-key']) {
                        sh '''
                            # Establish SSH connection and run deployment commands
                            ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << 'ENDSSH'
                                # Ensure Docker is installed
                                if ! command -v docker &> /dev/null; then
                                    echo "Installing Docker..."
                                    sudo yum update -y
                                    sudo yum install -y docker
                                    sudo service docker start
                                    sudo systemctl enable docker
                                    sudo usermod -aG docker ec2-user
                                fi

                                # Ensure Docker Compose is installed
                                if ! command -v docker-compose &> /dev/null; then
                                    echo "Installing Docker Compose..."
                                    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                                    sudo chmod +x /usr/local/bin/docker-compose
                                    sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
                                fi

                                # Login to DockerHub
                                echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

                                # Pull latest Docker images
                                echo "Pulling latest Docker images..."
                                docker pull $DOCKERHUB_USERNAME/auth-service:latest
                                docker pull $DOCKERHUB_USERNAME/frontend:latest

                                # Stop and remove existing containers
                                echo "Stopping existing containers..."
                                docker stop auth-service frontend || true
                                docker rm auth-service frontend || true

                                # Create docker-compose file
                                cat > ~/docker-compose.yml << EOL
version: '3'

services:
  auth-service:
    image: $DOCKERHUB_USERNAME/auth-service:latest
    container_name: auth-service
    restart: always
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    networks:
      - app-network

  frontend:
    image: $DOCKERHUB_USERNAME/frontend:latest
    container_name: frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - auth-service
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
EOL

                                # Deploy using docker-compose
                                echo "Deploying with docker-compose..."
                                cd ~
                                docker-compose up -d

                                # Wait for services to stabilize
                                sleep 10
                                docker ps

                                # Clean up old Docker images
                                echo "Cleaning up unused Docker images..."
                                docker image prune -af

                                echo "Deployment completed successfully!"
                            ENDSSH
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Deployment to EC2 completed successfully!'
        }
        
        failure {
            echo 'Deployment to EC2 failed. Check the logs for details.'
        }
    }
}